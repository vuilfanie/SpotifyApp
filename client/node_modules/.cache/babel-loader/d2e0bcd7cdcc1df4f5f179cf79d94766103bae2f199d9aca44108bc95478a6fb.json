{"ast":null,"code":"import _defineProperty from\"D:/Andrew/Documents/GitHub/SpotifyApp/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _regeneratorRuntime from\"D:/Andrew/Documents/GitHub/SpotifyApp/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/Andrew/Documents/GitHub/SpotifyApp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import axios from\"axios\";// Map for localStorage keys\nvar LOCALSTORAGE_KEYS={accessToken:'spotify_access_token',refreshToken:'spotify_refresh_token',expireTime:'spotify_token_expire_time',timestamp:'spotify_token_timestamp'};// Map to retrieve localStorage values\nvar LOCALSTORAGE_VALUES={accessToken:window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),refreshToken:window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),expireTime:window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),timestamp:window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)};/**\r\n * Clear out all localStorage items we've set and reload the page\r\n * @returns {void}\r\n */export var logout=function logout(){// Clear all localStorage items\nfor(var property in LOCALSTORAGE_KEYS){window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);}// Navigate to homepage\nwindow.location=window.location.origin;};/**\r\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n * @returns {boolean} Whether or not the access token in localStorage has expired\r\n */var hasTokenExpired=function hasTokenExpired(){var accessToken=LOCALSTORAGE_VALUES.accessToken,timestamp=LOCALSTORAGE_VALUES.timestamp,expireTime=LOCALSTORAGE_VALUES.expireTime;if(!accessToken||!timestamp){return false;}var millisecondsElapsed=Date.now()-Number(timestamp);return millisecondsElapsed/1000>Number(expireTime);};/**\r\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n * in our Node app, then update values in localStorage with data from response.\r\n * @returns {void}\r\n */var refreshToken=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _yield$axios$get,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;// Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\nif(!LOCALSTORAGE_VALUES.refreshToken||LOCALSTORAGE_VALUES.refreshToken==='undefined'||Date.now()-Number(LOCALSTORAGE_VALUES.timestamp)/1000<1000){console.error('No refresh token available');logout();}// Use `/refresh_token` endpoint from our Node app\n_context.next=4;return axios.get(\"/refresh_token?refresh_token=\".concat(LOCALSTORAGE_VALUES.refreshToken));case 4:_yield$axios$get=_context.sent;data=_yield$axios$get.data;// Update localStorage values\nwindow.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken,data.access_token);window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp,Date.now());// Reload the page for localStorage updates to be reflected\nwindow.location.reload();_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);console.error(_context.t0);case 14:case\"end\":return _context.stop();}},_callee,null,[[0,11]]);}));return function refreshToken(){return _ref.apply(this,arguments);};}();/**\r\n * Handles logic for retrieving the Spotify access token from localStorage\r\n * or URL query params\r\n * @returns {string} A Spotify access token\r\n */var getAccessToken=function getAccessToken(){var _queryParams;var queryString=window.location.search;var urlParams=new URLSearchParams(queryString);var queryParams=(_queryParams={},_defineProperty(_queryParams,LOCALSTORAGE_KEYS.accessToken,urlParams.get('access_token')),_defineProperty(_queryParams,LOCALSTORAGE_KEYS.refreshToken,urlParams.get('refresh_token')),_defineProperty(_queryParams,LOCALSTORAGE_KEYS.expireTime,urlParams.get('expires_in')),_queryParams);var hasError=urlParams.get('error');// If there's an error OR the token in localStorage has expired, refresh the token\nif(hasError||hasTokenExpired()||LOCALSTORAGE_VALUES.accessToken==='undefined'){refreshToken();}// If there is a valid access token in localStorage, use that\nif(LOCALSTORAGE_VALUES.accessToken&&LOCALSTORAGE_VALUES.accessToken!=='undefined'){return LOCALSTORAGE_VALUES.accessToken;}// If there is a token in the URL query params, user is logging in for the first time\nif(queryParams[LOCALSTORAGE_KEYS.accessToken]){// Store the query params in localStorage\nfor(var property in queryParams){window.localStorage.setItem(property,queryParams[property]);}// Set timestamp\nwindow.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp,Date.now());// Return access token from query params\nreturn queryParams[LOCALSTORAGE_KEYS.accessToken];}// We should never get here!\nreturn false;};export var accessToken=getAccessToken();/**\r\n * Axios global request headers\r\n * https://github.com/axios/axios#global-axios-defaults\r\n */axios.defaults.baseURL='https://api.spotify.com/v1';axios.defaults.headers['Authorization']=\"Bearer \".concat(accessToken);axios.defaults.headers['Content-Type']='application/json';/**\r\n * Get Current User's Profile\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\r\n * @returns {Promise}\r\n */export var getCurrentUserProfile=function getCurrentUserProfile(){return axios.get('/me');};/**\r\n * Get a List of Current User's Playlists\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists\r\n * @returns {Promise}\r\n */export var getCurrentUserPlaylists=function getCurrentUserPlaylists(){var limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:20;return axios.get(\"/me/playlists?limit=\".concat(limit));};/**\r\n * Get a User's Top Artists and Tracks\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks\r\n * @param {string} time_range - 'short_term' (last 4 weeks) 'medium_term' (last 6 months) or 'long_term' (calculated from several years of data and including all new data as it becomes available). Defaults to 'short_term'\r\n * @returns {Promise}\r\n */export var getTopArtists=function getTopArtists(){var time_range=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'short_term';return axios.get(\"/me/top/artists?time_range=\".concat(time_range));};/**\r\n * Get a User's Top Tracks\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks\r\n * @param {string} time_range - 'short_term' (last 4 weeks) 'medium_term' (last 6 months) or 'long_term' (calculated from several years of data and including all new data as it becomes available). Defaults to 'short_term'\r\n * @returns {Promise}\r\n */export var getTopTracks=function getTopTracks(){var time_range=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'short_term';return axios.get(\"/me/top/tracks?time_range=\".concat(time_range));};/**\r\n * Get a Playlist\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist\r\n * @param {string} playlist_id - The Spotify ID for the playlist.\r\n * @returns {Promise}\r\n */export var getPlaylistById=function getPlaylistById(playlist_id){return axios.get(\"/playlists/\".concat(playlist_id));};/**\r\n * Get Audio Features for Several Tracks\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-several-audio-features\r\n * @param {string} ids - A comma-separated list of the Spotify IDs for the tracks\r\n * @returns {Promise}\r\n */export var getAudioFeaturesForTracks=function getAudioFeaturesForTracks(ids){return axios.get(\"/audio-features?ids=\".concat(ids));};","map":{"version":3,"names":["axios","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","logout","property","removeItem","location","origin","hasTokenExpired","millisecondsElapsed","Date","now","Number","console","error","get","data","setItem","access_token","reload","getAccessToken","queryString","search","urlParams","URLSearchParams","queryParams","hasError","defaults","baseURL","headers","getCurrentUserProfile","getCurrentUserPlaylists","limit","getTopArtists","time_range","getTopTracks","getPlaylistById","playlist_id","getAudioFeaturesForTracks","ids"],"sources":["D:/Andrew/Documents/GitHub/SpotifyApp/client/src/Spotify.js"],"sourcesContent":["import  axios from \"axios\";\r\n\r\n// Map for localStorage keys\r\nconst LOCALSTORAGE_KEYS = {\r\n    accessToken: 'spotify_access_token',\r\n    refreshToken: 'spotify_refresh_token',\r\n    expireTime: 'spotify_token_expire_time',\r\n    timestamp: 'spotify_token_timestamp',\r\n  }\r\n  \r\n  // Map to retrieve localStorage values\r\n  const LOCALSTORAGE_VALUES = {\r\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\r\n    refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\r\n    expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\r\n    timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\r\n  };\r\n\r\n/**\r\n * Clear out all localStorage items we've set and reload the page\r\n * @returns {void}\r\n */\r\n export const logout = () => {\r\n    // Clear all localStorage items\r\n    for (const property in LOCALSTORAGE_KEYS) {\r\n      window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\r\n    }\r\n    // Navigate to homepage\r\n    window.location = window.location.origin;\r\n  };\r\n\r\n/**\r\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n * @returns {boolean} Whether or not the access token in localStorage has expired\r\n */\r\n const hasTokenExpired = () => {\r\n    const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES;\r\n    if (!accessToken || !timestamp) {\r\n      return false;\r\n    }\r\n    const millisecondsElapsed = Date.now() - Number(timestamp);\r\n    return (millisecondsElapsed / 1000) > Number(expireTime);\r\n  };\r\n\r\n/**\r\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n * in our Node app, then update values in localStorage with data from response.\r\n * @returns {void}\r\n */\r\n const refreshToken = async () => {\r\n    try {\r\n      // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\r\n      if (!LOCALSTORAGE_VALUES.refreshToken ||\r\n        LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\r\n        (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\r\n      ) {\r\n        console.error('No refresh token available');\r\n        logout();\r\n      }\r\n  \r\n      // Use `/refresh_token` endpoint from our Node app\r\n      const { data } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\r\n  \r\n      // Update localStorage values\r\n      window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\r\n      window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\r\n  \r\n      // Reload the page for localStorage updates to be reflected\r\n      window.location.reload();\r\n  \r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n/**\r\n * Handles logic for retrieving the Spotify access token from localStorage\r\n * or URL query params\r\n * @returns {string} A Spotify access token\r\n */\r\n const getAccessToken = () => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const queryParams = {\r\n      [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\r\n      [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\r\n      [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\r\n    };\r\n    const hasError = urlParams.get('error');\r\n  \r\n    // If there's an error OR the token in localStorage has expired, refresh the token\r\n    if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n      refreshToken();\r\n    }\r\n  \r\n    // If there is a valid access token in localStorage, use that\r\n    if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\r\n      return LOCALSTORAGE_VALUES.accessToken;\r\n    }\r\n  \r\n    // If there is a token in the URL query params, user is logging in for the first time\r\n    if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\r\n      // Store the query params in localStorage\r\n      for (const property in queryParams) {\r\n        window.localStorage.setItem(property, queryParams[property]);\r\n      }\r\n      // Set timestamp\r\n      window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\r\n      // Return access token from query params\r\n      return queryParams[LOCALSTORAGE_KEYS.accessToken];\r\n    }\r\n  \r\n    // We should never get here!\r\n    return false;\r\n  };\r\n  \r\n  export const accessToken = getAccessToken();\r\n\r\n  /**\r\n * Axios global request headers\r\n * https://github.com/axios/axios#global-axios-defaults\r\n */\r\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\r\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\r\naxios.defaults.headers['Content-Type'] = 'application/json';\r\n\r\n/**\r\n * Get Current User's Profile\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\r\n * @returns {Promise}\r\n */\r\n export const getCurrentUserProfile = () => axios.get('/me');\r\n\r\n /**\r\n * Get a List of Current User's Playlists\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists\r\n * @returns {Promise}\r\n */\r\nexport const getCurrentUserPlaylists = (limit = 20) => {\r\n  return axios.get(`/me/playlists?limit=${limit}`);\r\n};\r\n\r\n/**\r\n * Get a User's Top Artists and Tracks\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks\r\n * @param {string} time_range - 'short_term' (last 4 weeks) 'medium_term' (last 6 months) or 'long_term' (calculated from several years of data and including all new data as it becomes available). Defaults to 'short_term'\r\n * @returns {Promise}\r\n */\r\n export const getTopArtists = (time_range = 'short_term') => {\r\n  return axios.get(`/me/top/artists?time_range=${time_range}`);\r\n};\r\n\r\n/**\r\n * Get a User's Top Tracks\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks\r\n * @param {string} time_range - 'short_term' (last 4 weeks) 'medium_term' (last 6 months) or 'long_term' (calculated from several years of data and including all new data as it becomes available). Defaults to 'short_term'\r\n * @returns {Promise}\r\n */\r\n export const getTopTracks = (time_range = 'short_term') => {\r\n  return axios.get(`/me/top/tracks?time_range=${time_range}`);\r\n};\r\n\r\n/**\r\n * Get a Playlist\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist\r\n * @param {string} playlist_id - The Spotify ID for the playlist.\r\n * @returns {Promise}\r\n */\r\n export const getPlaylistById = playlist_id => {\r\n  return axios.get(`/playlists/${playlist_id}`);\r\n}\r\n\r\n/**\r\n * Get Audio Features for Several Tracks\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-several-audio-features\r\n * @param {string} ids - A comma-separated list of the Spotify IDs for the tracks\r\n * @returns {Promise}\r\n */\r\n export const getAudioFeaturesForTracks = ids => {\r\n  return axios.get(`/audio-features?ids=${ids}`);\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}