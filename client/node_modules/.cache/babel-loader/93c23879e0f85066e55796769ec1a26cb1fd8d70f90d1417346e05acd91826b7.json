{"ast":null,"code":"import _toConsumableArray from\"D:/Andrew/Documents/GitHub/SpotifyApp/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _regeneratorRuntime from\"D:/Andrew/Documents/GitHub/SpotifyApp/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/Andrew/Documents/GitHub/SpotifyApp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"D:/Andrew/Documents/GitHub/SpotifyApp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from'react';import axios from'axios';import{getCurrentUserPlaylists}from'../Spotify';import{catchErrors}from'../utils';import{SectionWrapper,PlaylistsGrid,Loader}from'../components';import{jsx as _jsx}from\"react/jsx-runtime\";var Playlists=function Playlists(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),playlistsData=_useState2[0],setPlaylistsData=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),playlists=_useState4[0],setPlaylists=_useState4[1];useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _yield$getCurrentUser,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return getCurrentUserPlaylists();case 2:_yield$getCurrentUser=_context.sent;data=_yield$getCurrentUser.data;setPlaylistsData(data);case 5:case\"end\":return _context.stop();}},_callee);}));return function fetchData(){return _ref.apply(this,arguments);};}();catchErrors(fetchData());},[]);// When playlistsData updates, check if there are more playlists to fetch\n// then update the state variable\nuseEffect(function(){if(!playlistsData){return;}// Playlist endpoint only returns 20 playlists at a time, so we need to\n// make sure we get ALL playlists by fetching the next set of playlists\nvar fetchMoreData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var _yield$axios$get,data;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:if(!playlistsData.next){_context2.next=6;break;}_context2.next=3;return axios.get(playlistsData.next);case 3:_yield$axios$get=_context2.sent;data=_yield$axios$get.data;setPlaylistsData(data);case 6:case\"end\":return _context2.stop();}},_callee2);}));return function fetchMoreData(){return _ref2.apply(this,arguments);};}();// Use functional update to update playlists state variable\n// to avoid including playlists as a dependency for this hook\n// and creating an infinite loop\nsetPlaylists(function(playlists){return[].concat(_toConsumableArray(playlists?playlists:[]),_toConsumableArray(playlistsData.items));});// Fetch next set of playlists as needed\ncatchErrors(fetchMoreData());},[playlistsData]);return/*#__PURE__*/_jsx(\"main\",{children:/*#__PURE__*/_jsx(SectionWrapper,{title:\"Public Playlists\",breadcrumb:true,children:playlists?/*#__PURE__*/_jsx(PlaylistsGrid,{playlists:playlists}):/*#__PURE__*/_jsx(Loader,{})})});};export default Playlists;","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","catchErrors","SectionWrapper","PlaylistsGrid","Loader","Playlists","playlistsData","setPlaylistsData","playlists","setPlaylists","fetchData","data","fetchMoreData","next","get","items"],"sources":["D:/Andrew/Documents/GitHub/SpotifyApp/client/src/pages/Playlists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists } from '../Spotify';\r\nimport { catchErrors } from '../utils';\r\nimport { SectionWrapper, PlaylistsGrid, Loader } from '../components';\r\n\r\nconst Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      setPlaylistsData(data);\r\n    };\r\n\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        const { data } = await axios.get(playlistsData.next);\r\n        setPlaylistsData(data);\r\n      }\r\n    };\r\n\r\n    // Use functional update to update playlists state variable\r\n    // to avoid including playlists as a dependency for this hook\r\n    // and creating an infinite loop\r\n    setPlaylists(playlists => ([\r\n      ...playlists ? playlists : [],\r\n      ...playlistsData.items\r\n    ]));\r\n\r\n    // Fetch next set of playlists as needed\r\n    catchErrors(fetchMoreData());\r\n\r\n  }, [playlistsData]);\r\n\r\n  return (\r\n    <main>\r\n      <SectionWrapper title=\"Public Playlists\" breadcrumb={true}>\r\n        {playlists ? (\r\n          <PlaylistsGrid playlists={playlists} />\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </SectionWrapper>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Playlists;"],"mappings":"giBAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,MAAOC,MAAK,KAAM,OAAO,CACzB,OAASC,uBAAuB,KAAQ,YAAY,CACpD,OAASC,WAAW,KAAQ,UAAU,CACtC,OAASC,cAAc,CAAEC,aAAa,CAAEC,MAAM,KAAQ,eAAe,CAAC,2CAEtE,GAAMC,UAAS,CAAG,QAAZA,UAAS,EAAS,CACtB,cAA0CR,QAAQ,CAAC,IAAI,CAAC,wCAAjDS,aAAa,eAAEC,gBAAgB,eACtC,eAAkCV,QAAQ,CAAC,IAAI,CAAC,yCAAzCW,SAAS,eAAEC,YAAY,eAE9BX,SAAS,CAAC,UAAM,CACd,GAAMY,UAAS,4FAAG,yLACOV,wBAAuB,EAAE,4CAAxCW,IAAI,uBAAJA,IAAI,CACZJ,gBAAgB,CAACI,IAAI,CAAC,CAAC,qDACxB,kBAHKD,UAAS,0CAGd,CAEDT,WAAW,CAACS,SAAS,EAAE,CAAC,CAC1B,CAAC,CAAE,EAAE,CAAC,CAEN;AACA;AACAZ,SAAS,CAAC,UAAM,CACd,GAAI,CAACQ,aAAa,CAAE,CAClB,OACF,CAEA;AACA;AACA,GAAMM,cAAa,6FAAG,uKAChBN,aAAa,CAACO,IAAI,iDACGd,MAAK,CAACe,GAAG,CAACR,aAAa,CAACO,IAAI,CAAC,wCAA5CF,IAAI,kBAAJA,IAAI,CACZJ,gBAAgB,CAACI,IAAI,CAAC,CAAC,uDAE1B,kBALKC,cAAa,2CAKlB,CAED;AACA;AACA;AACAH,YAAY,CAAC,SAAAD,SAAS,qCACjBA,SAAS,CAAGA,SAAS,CAAG,EAAE,qBAC1BF,aAAa,CAACS,KAAK,IACtB,CAAC,CAEH;AACAd,WAAW,CAACW,aAAa,EAAE,CAAC,CAE9B,CAAC,CAAE,CAACN,aAAa,CAAC,CAAC,CAEnB,mBACE,mCACE,KAAC,cAAc,EAAC,KAAK,CAAC,kBAAkB,CAAC,UAAU,CAAE,IAAK,UACvDE,SAAS,cACR,KAAC,aAAa,EAAC,SAAS,CAAEA,SAAU,EAAG,cAEvC,KAAC,MAAM,IACR,EACc,EACZ,CAEX,CAAC,CAED,cAAeH,UAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}